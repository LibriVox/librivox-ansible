<IfModule qos_module>

  ### Docs

  ## This file is MOSTLY a set of limits that are applied to specific requests.  The requests are tagged with
  #  counters like "ForumPage_PerIP_Short".  We use "Page" to mean an actual page that the user requests, rather than
  #  a JS/CSS resource or an image.  We have separate _Short, _Med, and _Long counters so that we can have high
  #  "burst" limits, which go down to more sustainable rates over longer time-frames.

  ## Official manual for mod_qos:
  #  https://mod-qos.sourceforge.net/
  
  ## ...and a blog post with a simple usage example, and some helpful comments:
  #  https://ionica.ca/2021/08/24/mitigating-denial-of-service-attacks-with-mod_qos/

  ## There's a "VIP" feature we might consider using in future.  As-is, our applications don't offer a reliable way
  #  for mod_qos to check for "VIP" status, so we work from the opposite direction, giving generous(?) limits to
  #  everyone, and then tightening things down where we can.
  #  https://mod-qos.sourceforge.net/#privilegedusers
  ### /Docs


  ### Housekeeping

  ## Return this status code when blocking a request
  QS_ErrorResponseCode		429

  ## Save logs of request rates, response times, and response status codes over time.
  #QSLog "|/usr/bin/qslog -o /var/log/apache2/qos.log.csv"

  ## Track stats for this number of clients.  It seems that less active clients will "roll off" the list over time.
  #  Default is 50000.
  #QS_ClientEntries		50000
  ### /Housekeeping


  ### TCP stream limits - close extra connections when we're busy

  ## Defines the maximum allowed number of concurrent TCP connections for this server.
  #  I'm not sure how this differs from MaxRequestWorkers (in mods-enabled/mpm_event.conf) which is set from Ansible
  #QS_SrvMaxConn			300

  ## Allows keep-alive support till the server reaches this number of connections.
  #  When given as a percentage, it is explicitly relative to MaxRequestWorkers.
  QS_SrvMaxConnClose		80%

  ## The maximum number of TCP connection streams allowed to stay open from a single IP, at any given time.
  #  As the number of existing connections (load) goes up, reduce the limit.  Firefox and Chromium both work fine
  #  with 10 connection streams, even with nothing in cache.  Below that, new visitors will have trouble.
  #				conn	load
  QS_SrvMaxConnPerIP		30
  QS_SrvMaxConnPerIP		15	200
  QS_SrvMaxConnPerIP		10	275
  ### /TCP stream limits


  ### Server-wide page limits - not to be used for light-weight files and images!

  ## Slow-down after a burst
  #  After allowing an initial burst, the next requests with this counter *may* have a slight delay added, rather
  #  than being blocked.  On a busy server, it should nudge clients toward this average rate of requests, over time.
  # Use: QS_Event		avg
  QS_ClientEventPerSecLimit	3

  ## Persistent blocks for persistent clients
  #  Requests with this counter will be blocked if they exceed the limit.  Unlike the others, this might actually
  #  close the TCP connection, and future requests with this counter will *reset* the counter, if they are still
  #  within the blocking window.
  # Use: QS_Block		req	sec
  QS_ClientEventBlockCount	60	30

  ## Limit paralel requests by the same client
  #  Requests with this flag set will be run only once (per client) at any given time.
  # Use: QS_Serialize
  QS_ClientSerialize
  ### /Server-wide page limits


  ### Forum limits - using counters as set in forum.librivox.org.conf

  ## Page requests - should not apply to logged-in users
  #  Concurrent guest page load limit (in normal operation, this is way more permissive than "X per second", since requests should be fast)
  QS_EventRequestLimit		ForumPage_Guests_Concurrent	250
  #  Per-user (or per-IP)	req	sec	counter
  QS_ClientEventLimitCount	4	1	ForumPage_PerIP_Short
  QS_ClientEventLimitCount	8	20	ForumPage_PerIP_Med
  QS_ClientEventLimitCount	24	180	ForumPage_PerIP_Long

  ## Resource file requests (CSS/JS) - should soon be in client caches, so we use a 1x2x4 pattern for the lengthening time-frames
  #  All-user limit
  #QS_EventRequestLimit		ForumRes_All_Concurrent	50
  #  Per-user (or per-IP)	req	sec	counter
  QS_ClientEventLimitCount	30	1	ForumRes_PerIP_Short
  QS_ClientEventLimitCount	60	10	ForumRes_PerIP_Med
  QS_ClientEventLimitCount	120	120	ForumRes_PerIP_Long

  ## Image requests (decorations, but mainly emojis) - should soon be in client caches, so we use a 1x2x4 pattern for the lengthening time-frames
  #  All-user limit
  #QS_EventRequestLimit		ForumImg_All_Concurrent	25
  #  Per-user (or per-IP)	req	sec	counter
  QS_ClientEventLimitCount	65	1	ForumImg_PerIP_Short
  QS_ClientEventLimitCount	130	10	ForumImg_PerIP_Med
  QS_ClientEventLimitCount	260	120	ForumImg_PerIP_Long
  ### /Forum limits

  ## Limits for POST requests (login attempts, posting and previewing messages, or moderation actions)
  #  All-user limit - Note: these requests are also marked with QS_Serialize, so each user can only do one at a time.
  #QS_EventRequestLimit		ForumPost_All_Concurrent	5

  #  Posts by logged-in users
  #  Per-user (or per-IP)	req	sec	counter
  QS_ClientEventLimitCount	3	3	ForumPost_PerIP_Short
  QS_ClientEventLimitCount	6	12	ForumPost_PerIP_Med
  QS_ClientEventLimitCount	20	60	ForumPost_PerIP_Long

  #  Login attempts (we can be somewhat harsher on repeats)
  #  Per-user (or per-IP)	req	sec	counter
  QS_ClientEventLimitCount	12	60	ForumLogin_PerIP_Med
  QS_ClientEventLimitCount	20	1200	ForumLogin_PerIP_Long
  ## /Forum limits

</IfModule>
