---
# Install packages

- name: Install packages
  apt:
    name: ['git', 'apache2', 'mariadb-server', 'php8.1-fpm', 'php8.1-mysql',
           'php8.1-curl', 'php8.1-memcached', 'python3-certbot-apache',
           'python3-mysqldb', 'sphinxsearch', 'mp3gain', 'unzip']
    state: latest
    update_cache: yes
  become: true

# librivox group and /librivox directory

- name: librivox group
  group:
    name: librivox
    state: present
  become: true

- name: /librivox directory
  file:
    path: /librivox
    state: directory
    group: librivox
    mode: 0775
    # The assumption here is that the user running the Ansible playbook is a
    # member of the librivox group.
  become: true

- name: /librivox/bin directory
  file:
    path: /librivox/bin
    state: directory

# Cronjob

- name: Upload daily-cron
  copy:
    src: daily-cron
    dest: /librivox/bin/daily-cron
    mode: 0755

- name: daily-cron cronjob
  cron:
    name: daily-cron
    minute: '45'
    hour: '3'
    job: /librivox/bin/daily-cron

# Apache

- name: MaxRequestWorkers line
  lineinfile:
    dest: /etc/apache2/mods-enabled/mpm_event.conf
    regexp: 'MaxRequestWorkers'
    line: "\tMaxRequestWorkers\t300"
  become: true
  notify: Restart Apache

- name: Apache modules
  apache2_module:
    name: '{{ item }}'
    state: present
  with_items:
    - ssl
    - proxy_fcgi
  become: true
  notify: Restart Apache

# PHP

- name: PHP pool configuration file
  template:
    src: www.conf
    dest: /etc/php/8.1/fpm/pool.d/www.conf
  become: true
  notify: Restart PHP

# SphinxSearch

- name: /librivox/sphinxsearch/data directory
  file:
    path: /librivox/sphinxsearch/data
    state: directory
    owner: "{{ ansible_facts['user_id'] }}"
    group: sphinxsearch
    mode: 0775
    recurse: true
  become: true

- name: Enable sphinx
  lineinfile:
    dest: /etc/default/sphinxsearch
    regexp: 'START=no'
    line: 'START=yes'
  become: true
  notify: Restart Sphinx

- name: Sphinx configuration files
  copy:
    src: "{{ item }}"
    dest: "/etc/sphinxsearch/{{ item }}"
  with_items:
    - common.conf
    - sphinx.conf
  become: true

- name: Upload sphinx-index-update
  copy:
    src: sphinx-index-update
    dest: /librivox/bin/sphinx-index-update
    mode: 0755

- name: sphinx-index-update cronjob
  cron:
    name: sphinx-index-update
    minute: "*"
    job: /librivox/bin/sphinx-index-update

# SSH port

- name: sshd_config port
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^Port '
    line: 'Port 58568'
  become: true

# Shared directories

- name: /librivox/shared/uploads directory
  # This serves as the home directory for the `mc` user, which is only allowed
  # SFTP. For obscure reasons, this needs to be owned root:root, and the *real*
  # uploads directory, /librivox/shared/uploads/uploads (yes, twice) is owned
  # www-data:librivox 0775.
  file:
    path: /librivox/shared/uploads
    state: directory
    recurse: yes
  become: true

- name: uploads and librivox-validator-books directories
  file:
    path: /librivox/shared/{{ item }}
    state: directory
    owner: www-data
    group: librivox
    mode: 0775
  with_items:
    - librivox-validator-books
    - uploads/uploads
  become: true

- name: Uploads robots.txt
  copy:
    src: robots.txt
    dest: /librivox/shared/uploads/uploads/robots.txt
  become: true

# TLS
# We can't run certbot on anything other than production because DNS

- name: Upload certbot-issue
  copy:
    src: certbot-issue
    dest: /librivox/bin/certbot-issue
    mode: 0755
  when: "'production' in inventory_file"

- name: Run certbot-issue
  command: /librivox/bin/certbot-issue
  when: "'production' in inventory_file"

- name: certbot renew cronjob
  cron:
    name: certbot renew
    special_time: monthly
    job: "/usr/bin/certbot renew --post-hook 'systemctl restart apache2'"
  when: "'production' in inventory_file"

- name: Install python3-openssl for self-signed cert
  apt:
    name: python3-openssl
    state: latest
    update_cache: yes
  become: true
  when: "'localdev' in inventory_file"

- name: certs directory
  file:
    path: /etc/letsencrypt/live/librivox.org
    state: directory
    recurse: true
  become: true
  when: "'localdev' in inventory_file"

- name: localdev privkey
  openssl_privatekey:
    path: /etc/letsencrypt/live/librivox.org/privkey.pem
  become: true
  when: "'localdev' in inventory_file"

- name: localdev csr
  openssl_csr:
    privatekey_path: /etc/letsencrypt/live/librivox.org/privkey.pem
    path: /etc/letsencrypt/live/librivox.org/localdev.csr
    subject_alt_name: "DNS:librivox.org,DNS:forum.librivox.org,DNS:wiki.librivox.org"
  become: true
  when: "'localdev' in inventory_file"

- name: localdev self-signed cert
  openssl_certificate:
    path: /etc/letsencrypt/live/librivox.org/cert.pem
    privatekey_path: /etc/letsencrypt/live/librivox.org/privkey.pem
    csr_path: /etc/letsencrypt/live/librivox.org/localdev.csr
    provider: selfsigned
  become: true
  when: "'localdev' in inventory_file"

- name: fullchain symlink
  # In prod certbot generates a fullchain.pem for us, in localdev we fake it
  # with a symlink to our self signed cert.
  file:
    path: /etc/letsencrypt/live/librivox.org/fullchain.pem
    state: link
    src: /etc/letsencrypt/live/librivox.org/cert.pem
  become: true

# Staging hosts file entry
#
- name: hosts entry
  lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} librivox.org forum.librivox.org wiki.librivox.org"
  become: true
  when: "'production' not in inventory_file"

# Backups

- name: Upload backup
  copy:
    src: backup
    dest: /librivox/bin/backup
    mode: 0755
  when: "'production' in inventory_file"

- name: backup cronjob
  cron:
    name: backup
    minute: 15
    hour: 4
    job: /librivox/bin/backup
  when: "'production' in inventory_file"

# Google verification

- name: Verification file
  lineinfile:
    path: "/librivox/www/librivox.org/wordpress/{{ google_verification_filename }}"
    regexp: "google-site-verification"
    line: "{{ google_verification_contents }}"
    state: present
    create: yes
  when: "'production' in inventory_file"
